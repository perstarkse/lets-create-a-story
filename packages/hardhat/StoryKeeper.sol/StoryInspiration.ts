/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface StoryInspirationInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getStory"
      | "hasSubmitted"
      | "inspirationCount"
      | "inspirationIndex"
      | "inspirations"
      | "submitOrReplaceInspiration"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "InspirationSubmission"): EventFragment;

  encodeFunctionData(functionFragment: "getStory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasSubmitted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inspirationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "inspirationIndex",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "inspirations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitOrReplaceInspiration",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "getStory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasSubmitted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inspirationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inspirationIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "inspirations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitOrReplaceInspiration",
    data: BytesLike
  ): Result;
}

export namespace InspirationSubmissionEvent {
  export type InputTuple = [
    submitter: AddressLike,
    inspiration: string,
    story: string
  ];
  export type OutputTuple = [
    submitter: string,
    inspiration: string,
    story: string
  ];
  export interface OutputObject {
    submitter: string;
    inspiration: string;
    story: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StoryInspiration extends BaseContract {
  connect(runner?: ContractRunner | null): StoryInspiration;
  waitForDeployment(): Promise<this>;

  interface: StoryInspirationInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getStory: TypedContractMethod<[], [string], "view">;

  hasSubmitted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  inspirationCount: TypedContractMethod<[], [bigint], "view">;

  inspirationIndex: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  inspirations: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  submitOrReplaceInspiration: TypedContractMethod<
    [_inspiration: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getStory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hasSubmitted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "inspirationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "inspirationIndex"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "inspirations"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "submitOrReplaceInspiration"
  ): TypedContractMethod<[_inspiration: string], [void], "nonpayable">;

  getEvent(
    key: "InspirationSubmission"
  ): TypedContractEvent<
    InspirationSubmissionEvent.InputTuple,
    InspirationSubmissionEvent.OutputTuple,
    InspirationSubmissionEvent.OutputObject
  >;

  filters: {
    "InspirationSubmission(address,string,string)": TypedContractEvent<
      InspirationSubmissionEvent.InputTuple,
      InspirationSubmissionEvent.OutputTuple,
      InspirationSubmissionEvent.OutputObject
    >;
    InspirationSubmission: TypedContractEvent<
      InspirationSubmissionEvent.InputTuple,
      InspirationSubmissionEvent.OutputTuple,
      InspirationSubmissionEvent.OutputObject
    >;
  };
}
